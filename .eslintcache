[{"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/index.js":"1","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/App.js":"2","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/reportWebVitals.js":"3","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Row.js":"4","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/axios.js":"5","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/requests.js":"6","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Banner.js":"7","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Nav.js":"8"},{"size":500,"mtime":1612178134456,"results":"9","hashOfConfig":"10"},{"size":925,"mtime":1612429107385,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612178134456,"results":"12","hashOfConfig":"10"},{"size":1660,"mtime":1612437885044,"results":"13","hashOfConfig":"10"},{"size":133,"mtime":1612355037377,"results":"14","hashOfConfig":"10"},{"size":698,"mtime":1612355007699,"results":"15","hashOfConfig":"10"},{"size":1615,"mtime":1612440364418,"results":"16","hashOfConfig":"10"},{"size":855,"mtime":1612440165320,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ecev9s",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/index.js",[],["37","38"],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/App.js",[],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/reportWebVitals.js",[],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Row.js",["39","40"],"import React, { useState, useEffect } from 'react';\nimport axios from '../axios';\nimport requests from '../requests';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst baseImgUrl = 'https://image.tmdb.org/t/p/original';\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  //options for youtube\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = async (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n  };\n  return (\n    <div className='row'>\n      <h2>{title}</h2>\n      <div className='row__posters'>\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n            src={`${baseImgUrl}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/axios.js",[],["41","42"],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/requests.js",[],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Banner.js",[],"/home/priota/FOR GITHUB/Netflix-clone/netflix-clone/src/components/Nav.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":8,"nodeType":"49","messageId":"50","endLine":3,"endColumn":16},{"ruleId":"47","severity":1,"message":"51","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":20},{"ruleId":"43","replacedBy":"52"},{"ruleId":"45","replacedBy":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'requests' is defined but never used.","Identifier","unusedVar","'movieTrailer' is defined but never used.",["54"],["55"],"no-global-assign","no-unsafe-negation"]